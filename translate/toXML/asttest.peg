package toXML

import (
        "github.com/roflcopter4/x4c/ast"
        //"github.com/davecgh/go-spew/spew"
)

type MyParser Peg {
        a     ast.AST
        depth int
        _err  error

        cur   ast.Node
        block ast.Node

        tmp  string
}


#===========================================================================

Document          <- _ FileTypeStatement EOF
FileTypeStatement <- XMLStatement
XMLStatement      <- XMLExpression CompoundStatement

XMLExpression
        <- < Identifier >
                {
                    p.cur = p.block.AddXMLStatement(text)
                }
           LANGLE AttributeList RANGLE

Attribute
        <- < XPathIdentifier >
                {
                    p.tmp = text
                }
           EQU DQUOT < AttrChar* > DQUOT
                {
                    p.cur.(*ast.XMLStatement).AddAttribute(p.tmp, ast.NewExpression(text))
                    //spew.Fdump(os.Stderr, p.a.C().(*ast.XMLStatement).Attributes)
                }

AttributeList  <- Attribute*
# AttributeValue <- DQUOT < AttrChar* > DQUOT

CompoundStatement
        <- LCURLY
               {
                   p.block = p.cur
                   //fmt.Printf("%s%c\n", getindent(p.depth), 123)
                   //p.depth++
               }
           Statement*
               {
                   p.block = p.block.Parent()
                   //p.depth--
                   //fmt.Printf("%s%c\n", getindent(p.depth), 125)
                   //p.a.SetC(p.a.C().Parent())
               }
           RCURLY
         / SEMI

Statement
        <- XMLStatement
         / BlockComment

#===========================================================================

Keyword <- "Niggerfaggot"

Identifier      <- !Keyword IdNondigit IdChar* _    #{}
XPathIdentifier <- !Keyword IdNondigit XMLIdChar* _ #{}

AttrChar   <- !["] . / '\\"'
IdNondigit <- [a-z] / [A-Z] / [_]
IdChar     <- [a-z] / [A-Z] / [0-9] / [_]
XMLIdChar  <- [a-z] / [A-Z] / [0-9] / [_:]

BlockComment <- '/*' < (!'*/' .)* > '*/' _ { p.block.AddComment(text); }

#===========================================================================
# Operators / Punctuators

LCURLY    <-  '{'          _
RCURLY    <-  '}'          _
SEMI      <-  ';'          _
LANGLE    <-  '<'  ![=]    _
RANGLE    <-  '>'  ![=]    _
EQU       <-  '='  ![=]    _
DQUOT     <-  '"'          _

#LT <- LANGLE
#GT <- RANGLE

#COMMA     <-  ','          _
#SQUOT     <-  "'"          _

# LBRK      <-  '['          _
# RBRK      <-  ']'          _
# LPAREN    <-  '('          _
# RPAREN    <-  ')'          _
# AMP       <-  '&'  ![&]    _
# STAR      <-  '*'  ![=]    _
# PLUS      <-  '+'  ![+=]   _
# MINUS     <-  '-'  ![\-=>] _
# TILDA     <-  '~'          _
# BANG      <-  '!'  ![=]    _
# BACKSLASH <-  '/'  ![=]    _
# PERCENT   <-  '%'  ![=>]   _
# DOT       <-  '.'          _
# PTR       <-  '->'         _
# INC       <-  '++'         _
# DEC       <-  '--'         _
# LEFT      <-  '<<' ![=]    _
# RIGHT     <-  '>>' ![=]    _
# LE        <-  '<='         _
# GE        <-  '>='         _
# EQUEQU    <-  '=='         _
# BANGEQU   <-  '!='         _
# HAT       <-  '^'  ![=]    _
# OR        <-  '|'  ![=]    _
# ANDAND    <-  '&&'         _
# OROR      <-  '||'         _
# QUERY     <-  '?'          _
# COLON     <-  ':'  ![>]    _
# ELLIPSIS  <-  '...'        _
# STAREQU   <-  '*='         _
# DIVEQU    <-  '/='         _
# MODEQU    <-  '%='         _
# PLUSEQU   <-  '+='         _
# MINUSEQU  <-  '-='         _
# LEFTEQU   <-  '<<='        _
# RIGHTEQU  <-  '>>='        _
# ANDEQU    <-  '&='         _
# HATEQU    <-  '^='         _
# OREQU     <-  '|='         _


#===========================================================================

_ <- ( < Whitespace / Newline > )* {  } #{ p.block.AddTextNode(text); }

#{
#        p.block.AddTextNode(text)
#}

#Spacing <- ( Whitespace / Newline )+

Whitespace   <- ([ \t])
Newline      <- ([\r]? [\n])
# LineComment  <- '//' < (!'\n' .)* >

EOF <- !.
